#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <sys/time.h>
#include <arpa/inet.h>
#include <netinet/in.h>
#include <time.h>
#include <signal.h>
#include <ncurses.h>

#define DEBUGINFO1

#define PORT 8080

#define MAXCHAR 52
#define MAXLINE 17

#define TIMEOUT 10							// Max. number of seconds to wait for message
#define SLEEPTIME 1

#define OUTPUTFILE "receivedMessage.txt"

int sockfd;
struct sockaddr_in servaddr;
struct sockaddr_in cliaddr;
int len;

WINDOW* mainWindow;

void cleanUp() {

	close(sockfd);

	mvwprintw(mainWindow, MAXLINE + 3, 2, " PROGRAM ENDED. PRESS ANY KEY TO CONTINUE ");
	wrefresh(mainWindow);
	getch();
	endwin();

	printf("Socket closed.\n");
	printf("Program exited successfully.\n");
	exit(EXIT_SUCCESS);
}

void getCurrentTime(char* packageTime) {
	time_t rawtime;
	struct tm* timeinfo;

	time(&rawtime);
	timeinfo = localtime(&rawtime);

	snprintf(packageTime, strlen(asctime(timeinfo)), "%s", asctime(timeinfo));
}

void checkTerminalSize(int yMax, int xMax) {

	char timeStamp[30];
	getCurrentTime(timeStamp);
	int currentTimeStamp = strlen(timeStamp);

	int minTerminalHeight = MAXLINE + 2;
	int minTerminalWidth = currentTimeStamp + MAXCHAR + 2 + 4;

	if ((yMax < (minTerminalHeight + 4)) || (xMax < (minTerminalWidth + 4))) {	// +4 zbog box okvira

		mvwprintw(mainWindow, 2, 2, "RESIZE TERMINAL");
		mvwprintw(mainWindow, 3, 2, "MIN. HEIGHT: %d", minTerminalHeight + 4);
		mvwprintw(mainWindow, 4, 2, "MIN. WIDTH: %d", minTerminalWidth + 4);
		wrefresh(mainWindow);
		cleanUp();
	}
}

void initializeOutputFile() {

	FILE* filePointer;
	filePointer = fopen(OUTPUTFILE, "a");

	if (filePointer == NULL)
	{
		perror("file error");
		exit(EXIT_FAILURE);
	}

	fprintf(filePointer, "===== NEW RECEIVED MESSAGES =====\n");
	fclose(filePointer);
}

void writeMessageToFile(char* message, int id, WINDOW* win) {

	FILE* filePointer;
	filePointer = fopen(OUTPUTFILE, "a");

	if (filePointer == NULL)
	{
		perror("file error");
		exit(EXIT_FAILURE);
	}

	char packageTime[MAXCHAR];
	getCurrentTime(packageTime);

	mvwprintw(win, id % MAXLINE + 1, 2, "%s : %s", packageTime, message);
	box(win, 0, 0);

	refresh();
	wrefresh(win);

	fprintf(filePointer, "%s : %s", packageTime, message);
	fclose(filePointer);
}

int checkPackage(char* message, int* id) {

	char header[MAXCHAR] = "";

	char* token = strtok(message, ".");

	strcat(header, token);
	strcat(header, ".");

	if (atoi(token) != 0)
	{
		#ifdef DEBUGINFO
		mvwprintw(mainWindow, 1, 2, "[Wrong package type: %d, expected: 0]\n", atoi(token));
		wrefresh(mainWindow);
		#endif
		return 0;
	}

	token = strtok(NULL, ".");
	*id = atoi(token);

	strcat(header, token);
	strcat(header, ".");

	token = strtok(NULL, ".");

	strcat(header, token);

	token = strtok(NULL, ".");

	strncpy(message, token, MAXCHAR);

	#ifdef DEBUGINFO
	mvwprintw(mainWindow, 1, 2, "                                     ");
	mvwprintw(mainWindow, 1, 2, "[Received package header] : %s", header);
	wrefresh(mainWindow);
	#endif

	#ifndef DEBUGINFO
	mvwprintw(mainWindow, 1, 2, "[Newest message] : %s", message);
	wrefresh(mainWindow);
	#endif

	return 1;
}

void sendACK(int id) {

	char message[MAXCHAR];
	char ack[4] = "ACK";

	snprintf(message, MAXCHAR, "1.%d.%s", id, ack);

	sendto(sockfd, (const char *) message, strlen(message),
		0, (const struct sockaddr *) &cliaddr, len);

	#ifdef DEBUGINFO
	mvwprintw(mainWindow, 1, 40, "                      ");
	mvwprintw(mainWindow, 1, 40, "[ACK sent] : %s", message);
	wrefresh(mainWindow);
	#endif
}

void receivePackage(char* buffer) {

	memset(buffer, 0, MAXCHAR);

	int n = recvfrom(sockfd, (char *) buffer, MAXCHAR, 0,
				(struct sockaddr *) &cliaddr, &len);

	if (n < 0)
	{
		mvwprintw(mainWindow, 1, 2, "[There were no messages for %d seconds]\n", TIMEOUT);
		wrefresh(mainWindow);
		cleanUp();
	}

	buffer[n] = '\0';

}

// Driver code
int main() {

	char buffer[MAXCHAR];

	// Creating socket file descriptor
	if ((sockfd = socket(AF_INET, SOCK_DGRAM, 0)) < 0) {
		perror("socket creation failed");
		exit(EXIT_FAILURE);
	}

	signal(SIGINT, cleanUp);	// CTRL + C

	struct timeval read_timeout;
	read_timeout.tv_sec = TIMEOUT;
	read_timeout.tv_usec = 0;
	if (setsockopt(sockfd, SOL_SOCKET, SO_RCVTIMEO, &read_timeout, sizeof (read_timeout)) < 0)
	{
		perror("setsockopt() error");
		exit(EXIT_FAILURE);
	}

	memset(&servaddr, 0, sizeof(servaddr));
	memset(&cliaddr, 0, sizeof(cliaddr));

	// Filling server information
	servaddr.sin_family = AF_INET; // IPv4
	servaddr.sin_addr.s_addr = INADDR_ANY;
	servaddr.sin_port = htons(PORT);

	// Bind the socket with the server address
	if (bind(sockfd, (const struct sockaddr *) &servaddr, sizeof(servaddr)) < 0)
	{
		perror("bind failed");
		exit(EXIT_FAILURE);
	}

	initializeOutputFile();

	int packageId = -1;

	initscr();

	WINDOW* messageWindow;

	int yMax, xMax;
	getmaxyx(stdscr, yMax, xMax);

	mainWindow = newwin(yMax, xMax - 2, 0, 1);
	box(mainWindow, 0, 0);
	mvwprintw(mainWindow, 0, 2, " RECEIVER ");
	refresh();

	checkTerminalSize(yMax, xMax);

	messageWindow = newwin(MAXLINE + 2, xMax - 4, 2, 2);
	box(messageWindow, 0, 0);
	refresh();

	mvwprintw(mainWindow, 1, 2, "Waiting for messages...");
	wrefresh(mainWindow);

	while (1)
	{
		receivePackage(buffer);

		sleep(SLEEPTIME);

		if (checkPackage(buffer, &packageId))
		{
			writeMessageToFile(buffer, packageId, messageWindow);
			sendACK(packageId);
		}

	}

	endwin();

	return 0;
}
Ovaj kod predstavlja primjer UDP klijenta koji sluša na određenom portu (8080) i prihvaća poruke od bilo kojeg drugog klijenta koji šalje poruke na taj port. Kod koristi biblioteku ncurses za ispis primljenih poruka na terminalu. Poruke se također spremaju u datoteku "receivedMessage.txt".

Kod počinje sa uključivanjem potrebnih biblioteka, zatim definira neke konstante kao što su PORT, MAXCHAR, MAXLINE, TIMEOUT i SLEEPTIME.

Dalje, kod definira funkcije za čišćenje, dobivanje trenutnog vremena, provjeru veličine terminala, inicijalizaciju datoteke za ispis, ispis poruke u datoteku i provjeru paketa.

U glavnom dijelu koda, se inicijalizira socket, podešavaju parametri za servaddr i cliaddr strukture, te se koristi funkcija bind() da se socket veže na određeni IP i port.
Koristi se ncurses biblioteka za inicijalizaciju prozora i prikaz poruka.
Koristi se funkcija recvfrom() za primanje poruka i ispis primljenih poruka na terminalu.
Kod se završava sa funkcijom cleanUp() koja zatvara socket i ispisuje poruku o uspješnom završetku programa.




Krsto Zaric
sada bi objasni svaku implemetiranih funkcija posebno
cleanUp() - ova funkcija se poziva kada kod završi ili se dogodi neka greška. Ona zatvara socket koji se koristi za primanje poruka, ispisuje poruku o završetku programa na terminalu, zatvara prozor kreiran pomoću biblioteke ncurses i zatvara program sa izlaznim kodom EXIT_SUCCESS.

getCurrentTime(char* packageTime) - ova funkcija dohvaća trenutno vrijeme sa sistemskog sat i sprema ga u varijablu "packageTime" koja se koristi za ispis vremena kada je poruka primljena.

checkTerminalSize(int yMax, int xMax) - ova funkcija provjerava veličinu terminala i uspoređuje je sa minimalnom potrebnom veličinom terminala za pravilan prikaz poruka. Ako se terminal ne može prikazati pravilno, funkcija ispisuje poruku o potrebi promjene veličine terminala, zatvara prozor i zatvara program.

initializeOutputFile() - ova funkcija se koristi za inicijalizaciju datoteke u kojoj se spremaju primljene poruke. Ona otvara datoteku za pisanje i dodaje zaglavlje "===== NEW RECEIVED MESSAGES =====" na početak datoteke.

writeMessageToFile(char* message, int id, WINDOW* win) - ova funkcija se koristi za ispis primljene poruke u datoteku. Funkcija otvara datoteku, dohvaća trenutno vrijeme, ispisuje poruku i vrijeme u prozoru kreiranom pomoću biblioteke ncurses, te zatim zapisuje poruku i vrijeme u datoteku.

checkPackage(char* message, int* id) - ova funkcija provjerava da li je primljena poruka u ispravnom formatu. Poruka se sastoji od header-a i payload-a, header se sastoji od brojčanog identifikatora i točke, a payload se sastoji od teksta. Funkcija provjerava da li je header u ispravnom formatu i vraća vrijednost true ili false ovisno o tome.




Krsto Zaric
objasni mi funkciju void sendACK(int id)
Funkcija void sendACK(int id) se koristi za slanje potvrde primitka (ACK) na adresu koja je poslala poruku. Funkcija prima jedan argument, int id, koji predstavlja identifikator poruke koja je primljena.

Konkretno, funkcija se sastoji od sljedećih koraka:

Inicijalizira se varijabla "ack" tipa char koja se koristi za spremanje ACK poruke.
Koristi se funkcija snprintf() za kreiranje ACK poruke sa formatom "ACK.%d" gdje %d predstavlja identifikator poruke.
Koristi se funkcija sendto() za slanje ACK poruke na adresu koja je poslala poruku.
Slanje ACK poruke se koristi za potvrđivanje da je poruka primljena i da je prenos uspješan. Ako se ACK poruka ne primi na drugom kraju, to znači da je došlo do neke greške u prenosu i da se poruka treba ponovno poslati.




Krsto Zaric
objasni mi funkciju void receivePackage
Funkcija void receivePackage() se koristi za primanje poruka preko UDP-a.

Konkretno, funkcija se sastoji od sljedećih koraka:

Inicijalizira se varijab



Krsto Zaric
objasni mi funkciju, void receivePackage(char* buffer)
Funkcija void receivePackage(char* buffer) se koristi za primanje poruka preko UDP-a i spremanje ih u predani buffer. Funkcija prima jedan argument, char* buffer, koji predstavlja memorijski prostor u koji će biti spremljena primljena poruka.

Konkretno, funkcija se sastoji od sljedećih koraka:

Koristi se funkcija recvfrom() za primanje poruka na socketu. Funkcija prima tri argumenta, socket descriptor, buffer za spremanje poruke i varijablu za spremanje informacija o adresi i portu koji je poslao poruku.
Nakon što je poruka primljena, koristi se funkcija checkPackage() za provjeru da li je poruka u ispravnom formatu.
Ako je poruka u ispravnom formatu, koristi se funkcija writeMessageToFile() za ispis poruke na ekran i spremanje poruke u datoteku.
Nakon što je poruka ispisana i spremljena, funkcija sendACK() se poziva za slanje potvrde primitka (ACK) na adresu koja je poslala poruku.
Ova funkcija se poziva u glavnom dijelu koda u while petlji koja se izvršava dok se program ne završi.




Krsto Zaric
int main()
Funkcija int main() je glavna funkcija programa. Ona sadrži sve potrebne inicijalizacije i poziva druge funkcije za pravilno funkcioniranje programa.

Konkretno, funkcija int main() se sastoji od sljedećih koraka:

Inicijalizira se socket i podešavaju se parametri za strukture servaddr i cliaddr.
Koristi se funkcija bind() za vezivanje socketa na određeni IP i port.
Koristi se biblioteka ncurses za inicijalizaciju prozora i prikaz poruka.
Koristi se funkcija checkTerminalSize() za provjeru veličine terminala.
Inicijalizira se datoteka za spremanje poruka.
U while petlji se poziva funkcija receivePackage() za primanje poruka i ispis na ekran.
Nakon što se while petlja završi, poziva se funkcija cleanUp() za zatvaranje socketa i ispis poruke o uspješnom završetku programa.
Funkcija main() vraća izlazni kod EXIT_SUCCESS.
U main dijelu koda, se inicijalizira socket, podešavaju parametri za servaddr i cliaddr strukture, te se koristi funkcija bind() da se socket veže na određeni IP i port.
Koristi se ncurses biblioteka za inicijalizaciju prozora i prikaz poruka.
Koristi se funkcija receivePackage() za primanje poruka i ispis primljenih poruka na terminalu.
Kod se završava sa funkcijom cleanUp() koja zatvara socket i ispisuje poruku o uspješnom završetku programa.